#!/usr/bin/env bash

SPM_HOME="$HOME/.spm"
SPM_RECORD="$SPM_HOME/record"
default_shell=$(basename "$SHELL")

function refreshShell() {
  echo
  echo "Please run the following command to reload the environment: "
  echo
  echo "exec $SHELL"
}

function ensureSpmRecord() {
  if [ ! -d $SPM_HOME ]; then
    mkdir -p "$SPM_HOME"
    touch "$SPM_RECORD"
  elif [ ! -f "$SPM_RECORD" ]; then
    touch "$SPM_RECORD"
  fi
}

# List the shell PATH
function list() {
  echo "$PATH" | tr ':' '\n'
}

# Check the records
function check() {
  ensureSpmRecord
  cat "$SPM_RECORD"
}

# Uninstall spm
function uninstall() {
  if rm -rf "$SPM_HOME"; then
    echo "All spm related files are removed"
  else
    echo "Failed to remove $SPM_HOME"
  fi

  local rc_file=""
  if [ "$default_shell" == "bash" ]; then
    rc_file="$HOME/.bashrc"
  elif [ "$default_shell" == "zsh" ]; then
    rc_file="$HOME/.zshrc"
  else
    echo "Unsupported shell: $default_shell"
  fi

  if [[ -w "$rc_file" ]]; then
    # remove the lines between "# spm start" and "# spm end"
    sed -i '' '/^# spm start/,/# spm end/d' "$rc_file" ||
      echo "Warning: Failed to remove spm related lines from $rc_file"
  else
    echo "Warning: Failed to write to $rc_file"
  fi
}

# Add a new path
function add() {
  ensureSpmRecord
  local key=${1%%=*}
  local value=${1#*=}

  # Add a record if not exists
  if ! grep -q "^$key=" "$SPM_RECORD"; then
    echo "$key=$value" >>"$SPM_RECORD"
    echo "Added '$key=$value' to $SPM_RECORD"
  else
    echo "Warning: '$key=$value' already exists in $SPM_RECORD"
  fi

  local rc_file=""
  if [ "$default_shell" == "bash" ]; then
    rc_file="$HOME/.bashrc"
  elif [ "$default_shell" == "zsh" ]; then
    rc_file="$HOME/.zshrc"
  else
    echo "Unsupported shell: $default_shell"
    exit 1
  fi

  if [[ -w "$rc_file" ]]; then
    # construct the new path with the input value
    new_path="export PATH=$value:PATH"
    # insert the new path before the line containing "# spm end"
    sed -i '' '/# spm end/ s#^#'"$new_path\n"'#' $rc_file
    # export the new path to make it executable at once
    export PATH=$value:PATH
    # refreshShell
  else
    echo "Error: $rc_file is not writable"
  fi
}

# Remove a path created by spm
function remove() {
  ensureSpmRecord
  local key=$1
  local path_exists=false
  local new_path=""
  local path_value=""

  while IFS='=' read -r current_key current_value; do
    if [[ $current_key != $key ]]; then
      new_path+="${current_key}=${current_value}"
    else
      path_exists=true
      path_value="${current_value}"
    fi
  done <"$SPM_RECORD"

  echo "$new_path" >"$SPM_RECORD"
  echo "Removed '$key' from $SPM_RECORD"

  local rc_file=""
  if [ "$default_shell" == "bash" ]; then
    rc_file="$HOME/.bashrc"
  elif [ "$default_shell" == "zsh" ]; then
    rc_file="$HOME/.zshrc"
  else
    echo "Unsupported shell: $default_shell"
    exit 1
  fi

  if [ "$path_exists" = true ]; then

    # find the line between # spm start and # spm end which matches the path_value
    local line=$(sed -n "/# spm start/,/# spm end/p" "$rc_file" | grep -m 1 "$path_value")

    if [[ -n "$line" ]]; then
      if [[ -w "$rc_file" ]]; then
        # remove the line
        sed -i '' "\#$line#d" $rc_file
        refreshShell
      else
        echo "Warning: ${rc_file} is not writable"
      fi
    fi

    echo "Removed '$key=$path_value' from $rc_file"
  else
    echo "The key '$key' does not exist in $SPM_RECORD"
  fi
}

help() {
  cat <<'EOF'
USAGE:
    spm <command>

Commands:
    list                        List your real shell PATH
    check                       Check the path records managed by spm
    uninstall                   Uninstall spm
    add PATH_KEY=BINARY_PATH    Add a new path
    remove PATH_KEY             Remove a path created by spm
EOF
}

case "$1" in
"list")
  list
  ;;
"check")
  check
  ;;
"uninstall")
  uninstall
  ;;
"add")
  if [ -z "$2" ]; then
    echo "Usage: spm add <key>=<path>"
    exit 1
  fi
  add "$2"
  ;;
"remove")
  if [ -z "$2" ]; then
    echo "Usage: spm remove <key>"
    exit 1
  fi
  remove "$2"
  ;;
*)
  help
  exit 1
  ;;
esac
